<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <annotation-driven /> -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 요청을 처리할 동생 컨트롤러를 검색 및 반환할 전담 객체를 핸들러 매핑이라 하며, 이 객체들의 종류는 여러종류가 있고,
	개발자는 본인이 원하는 핸들러 매핑을 등록하고 사용해야 한다. 만일 아무것도 등록하지 않으면 , 스프링 3.x 이후 부터는 디폴트로
	DefaultAnnotationHandlerMapping 이 기본으로 등록된다 -->
	
	<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<beans:property name="alwaysUseFullPath" value="true"/>
		<beans:property name="mappings">
			<beans:props>
				<beans:prop key="/test">testController</beans:prop>
				<beans:prop key="/notice/regist">registController</beans:prop>
				<beans:prop key="/notice/list">listController</beans:prop>
			</beans:props>			
		</beans:property>						
	</beans:bean>	
	
	<!-- 동생 컨트롤러들 등록 -->
	<beans:bean class="com.koreait.springmvc.test.TestController" id="testController"/>
	
	<!-- 이 어플리케이션에서 사용할 빈들을 등록해놓자!! -->
	
	<!-- PoolManager 등록 -->
	<beans:bean class="com.koreait.springmvc.pool.PoolManager" id="poolManager" factory-method="getInstance"/>
	<beans:bean class="com.koreait.springmvc.mybatis.MybatisConfig" id="mybatisConfig" factory-method="getInstance"/>
	
	<!-- Pager 등록 -->
	<beans:bean class="com.koreait.springmvc.util.Pager" id="pager"></beans:bean>
	
	<!--  DAO들 -->
	<beans:bean class="com.koreait.springmvc.model.repository.notice.MybatisNoticeDAO" id="mybatisNoticeDAO">
		<beans:property name="mybatisConfig" ref="mybatisConfig"/>
	</beans:bean>
	
	<beans:bean class="com.koreait.springmvc.model.repository.notice.JdbcNoticeDAO" id="jdbcNoticeDAO">
		<beans:property name="pool" ref="poolManager"/>
	</beans:bean>
			
	<!-- 서비스 -->			
	<beans:bean class="com.koreait.springmvc.model.service.notice.NoticeServiceImpl" 
		id="noticeServiceImpl">
		<beans:property name="noticeDAO" ref="mybatisNoticeDAO"/>
	</beans:bean>
		
	<!-- 컨트롤러 -->
	<beans:bean class="com.koreait.springmvc.controller.notice.RegistController" id="registController">
		<beans:property name="noticeService" ref="noticeServiceImpl"/>
	</beans:bean>
	
	<beans:bean class="com.koreait.springmvc.controller.notice.ListController" id="listController">
		<beans:property name="noticeService" ref="noticeServiceImpl"/>
		<beans:property name="pager" ref="pager"></beans:property>
	</beans:bean>		
	
</beans:beans>










